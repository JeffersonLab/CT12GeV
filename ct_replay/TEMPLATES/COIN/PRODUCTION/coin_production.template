Run #: {gen_run_number}

**************************
* General Run Information
**************************
Beam energy : {gpbeam}
Target mass (amu) : {gtargmass_amu} 

HMS Particle Mass : {hpartmass}
HMS P Central : {hpcentral}
HMS Angle : {htheta_lab}

SHMS Particle Mass : {ppartmass}
SHMS P Central : {ppcentral}
SHMS Angle : {ptheta_lab}

// First value is with no BCM Current Threshold and Second value is with BCM Current Threshold (Set up in gScalers.param file)

SHMS Run Length   : {P.1MHz.scalerTime:%.3f} sec  OR {P.1MHz.scalerTimeCut:%.3f} sec
SHMS BCM4A Current: {P.BCM4A.scalerCharge/P.1MHz.scalerTime:%.3f} uA  OR  {P.BCM4A.scalerChargeCut/P.1MHz.scalerTimeCut:%.3f} uA  
SHMS Unser Current: {P.Unser.scalerCharge/P.1MHz.scalerTime:%.3f} uA  OR  {P.Unser.scalerChargeCut/P.1MHz.scalerTimeCut:%.3f} uA  
SHMS BCM4A Charge: {P.BCM4A.scalerCharge/1000.:%.3f} mC  OR  {P.BCM4A.scalerChargeCut/1000.:%.3f} mC		  
SHMS Unser Charge: {P.Unser.scalerCharge/1000.:%.3f} mC  OR  {P.Unser.scalerChargeCut/1000.:%.3f} mC

HMS  Run Length   : {H.1MHz.scalerTime:%.3f} sec  OR {H.1MHz.scalerTimeCut:%.3f} sec
HMS BCM4A Current: {H.BCM4A.scalerCharge/H.1MHz.scalerTime:%.3f} uA  OR  {H.BCM4A.scalerChargeCut/H.1MHz.scalerTimeCut:%.3f} uA
HMS Unser Current: {H.Unser.scalerCharge/H.1MHz.scalerTime:%.3f} uA  OR  {H.Unser.scalerChargeCut/H.1MHz.scalerTimeCut:%.3f} uA	  
HMS BCM4A Charge: {H.BCM4A.scalerCharge/1000.:%.3f} mC  OR  {H.BCM4A.scalerChargeCut/1000.:%.3f} mC
HMS Unser Charge: {H.Unser.scalerCharge/1000.:%.3f} mC  OR  {H.Unser.scalerChargeCut/1000.:%.3f} mC  
	 
SHMS _ HADRON SING FID TRACK EFFIC    : {shmsScinDidh.npassed / (shmsScinShouldh.npassed+0.0001):%8.4f} +- {(sqrt(shmsScinShouldh.npassed-shmsScinDidh.npassed) / (shmsScinShouldh.npassed+.0001)):%8.4f}
HMS _ E SING FID TRACK EFFIC         :   {HMSScinDide.npassed/(HMSScinShoulde.npassed+0.0001):%8.4f} +- {(sqrt(HMSScinShoulde.npassed-HMSScinDide.npassed)/(HMSScinShoulde.npassed+.0001)):%8.4f}

SHMS_3_of_4 EFF : {phodo_3_of_4_eff}
HMS_3_of_4 EFF : {hhodo_3_of_4_eff}


********************
* DAQ Configuration
********************

Ps1_factor = {gHC_ti_ps_factors[0]}
Ps2_factor = {gHC_ti_ps_factors[1]}
Ps3_factor = {gHC_ti_ps_factors[2]}
Ps4_factor = {gHC_ti_ps_factors[3]}
Ps5_factor = {gHC_ti_ps_factors[4]}
Ps6_factor = {gHC_ti_ps_factors[5]}

*********** 
* Triggers 
***********

=:=:=:=:=:=:=:  
= 3/4 Trigger
=:=:=:=:=:=:=:

Total SHMS 3/4 Triggers       : {P.pTRIG1.scaler}
Pre-Scaled SHMS 3/4 Triggers  : {(P.pTRIG1.scaler/gHC_ti_ps_factors[0]):%.0f}
Estimated SHMS 3/4 Triggers   : {P.pTRIG1.scalerRate*(P.1MHz.scaler/1000000.):%.0f}
SHMS 3/4 Trigger Rate         : {P.pTRIG1.scalerRate/1000.:%.3f} kHz
Accepted SHMS Triggers        : {pTRIG1_ROC2.npassed}

SHMS Computer Live Time : {(pTRIG1_ROC2.npassed / P.pTRIG1.scaler)*100.0:%3.4f} % [ {(pTRIG1_ROC2.npassed / (P.pTRIG1.scaler/gHC_ti_ps_factors[0]))*100.0:%3.4f} %  ]
SHMS Computer Dead Time : {100.0 - (pTRIG1_ROC2.npassed / P.pTRIG1.scaler)*100.0:%3.4f} % [ {100.0 - (pTRIG1_ROC2.npassed / (P.pTRIG1.scaler/gHC_ti_ps_factors[0]))*100.0:%3.4f} %  ]

Total HMS 3/4 Triggers        : {H.hTRIG1.scaler} [ {H.hTRIG1.scaler/gHC_ti_ps_factors[0]} ]
Pre-Scaled HMS 3/4 Triggers   : {(H.hTRIG1.scaler/gHC_ti_ps_factors[0]):%.0f}
Estimated HMS 3/4 Triggers    : {H.hTRIG1.scalerRate*(H.1MHz.scaler/1000000.):%.0f}
HMS 3/4 Trigger Rate          : {H.hTRIG1.scalerRate/1000.:%.3f} kHz
Accepted HMS Triggers         : {hTRIG1_ROC1.npassed}

HMS Computer Live Time  : {(hTRIG1_ROC1.npassed / H.hTRIG1.scaler)*100.0:%3.4f} % [ {(hTRIG1_ROC1.npassed / (H.hTRIG1.scaler/gHC_ti_ps_factors[0]))*100.0:%3.4f} %  ]
HMS Computer Dead Time  : {100.0 - (hTRIG1_ROC1.npassed / H.hTRIG1.scaler)*100.0:%3.4f} % [ {100.0 - (hTRIG1_ROC1.npassed / (H.hTRIG1.scaler/gHC_ti_ps_factors[0]))*100.0:%3.4f} %  ]

=:=:=:=:=:=:=:=:=:=:=:=:
= Physics 3/4 Triggers
=:=:=:=:=:=:=:=:=:=:=:=:

SHMS Physics 3/4 Triggers           : {P.pTRIG1.scaler - P.EDTM.scaler}
SHMS Estimated Physics 3/4 Triggers : {(P.pTRIG1.scalerRate - P.EDTM.scalerRate)*(P.1MHz.scaler/1000000.):%.0f}
SHMS Physics 3/4 Trigger Rate       : {(P.pTRIG1.scalerRate - P.EDTM.scalerRate)/1000.:%.3f} kHz
SHMS Accepted Physics Triggers      : {SHMS_physics_accepted.npassed}

HMS Physics 3/4 Triggers            : {H.hTRIG1.scaler - H.EDTM.scaler}
HMS Estimated Physics Triggers      : {(H.hTRIG1.scalerRate - H.EDTM.scalerRate)*(H.1MHz.scaler/1000000.):%.0f}
HMS Physics Trigger Rate            : {(H.hTRIG1.scalerRate - H.EDTM.scalerRate)/1000.:%.3f} kHz
HMS Accepted Physics Triggers       : {HMS_physics_accepted.npassed}

=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:
= Coin Trigger TDC Data scalers
=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:

Coin ROC2 pTRIG1 passed: {pTRIG1_ROC2.npassed}
Coin ROC2 pTRIG2 passed: {pTRIG2_ROC2.npassed}
Coin ROC2 pTRIG3 passed: {pTRIG3_ROC2.npassed}
Coin ROC2 pTRIG4 passed: {pTRIG4_ROC2.npassed}
Coin ROC2 pTRIG5 passed: {pTRIG5_ROC2.npassed}
Coin ROC2 pTRIG6 passed: {pTRIG6_ROC2.npassed}

Coin ROC1 pTRIG1 passed: {pTRIG1_ROC1.npassed}
Coin ROC1 pTRIG2 passed: {pTRIG2_ROC1.npassed}
Coin ROC1 pTRIG3 passed: {pTRIG3_ROC1.npassed}
Coin ROC1 pTRIG4 passed: {pTRIG4_ROC1.npassed}
Coin ROC1 pTRIG5 passed: {pTRIG5_ROC1.npassed}
Coin ROC1 pTRIG6 passed: {pTRIG6_ROC1.npassed}

HMS  Singles Triggers  :  {HMS_event.npassed}
SHMS Singles Triggers  :  {SHMS_event.npassed}
Coincidence  Triggers  :  {COIN_ONLY_event.npassed}
All triggers           :  {ALL_events.npassed}

=:=:=:=:=:=:=:=:=:=:=:=: 
= SHMS Trigger Scalers
=:=:=:=:=:=:=:=:=:=:=:=: 

SHMS_pEL_LO_LO :    {P.pEL_LO_LO.scaler}    [ {(P.pEL_LO_LO.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_pEL_LO    :    {P.pEL_LO.scaler}   [ {(P.pEL_LO.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_pEL_HI    :    {P.pEL_HI.scaler}   [ {(P.pEL_HI.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_pEL_REAL  :    {P.pEL_REAL.scaler} [ {(P.pEL_REAL.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_pEL_CLEAN :    {P.pEL_CLEAN.scaler}    [ {(P.pEL_CLEAN.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_pSTOF     :    {P.pSTOF.scaler}    [ {(P.pSTOF.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]

SHMS_pTRIG1 :   {P.pTRIG1.scaler}   [ {(P.pTRIG1.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_pTRIG2 :   {P.pTRIG2.scaler}   [ {(P.pTRIG2.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_pTRIG3 :   {P.pTRIG3.scaler}   [ {(P.pTRIG3.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_pTRIG4 :   {P.pTRIG4.scaler}   [ {(P.pTRIG4.scaler/P.1MHz.scalerTime):%.3f} Hz ]
SHMS_pTRIG5 :   {P.pTRIG5.scaler}   [ {(P.pTRIG5.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_pTRIG6 :   {P.pTRIG6.scaler}   [ {(P.pTRIG6.scaler/P.1MHz.scalerTime):%.3f} Hz ]

SHMS_hTRIG1 :   {P.hTRIG1.scaler}   [ {(P.hTRIG1.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_hTRIG2 :   {P.hTRIG2.scaler}   [ {(P.hTRIG2.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_hTRIG3 :   {P.hTRIG3.scaler}   [ {(P.hTRIG3.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_hTRIG4 :   {P.hTRIG4.scaler}   [ {(P.hTRIG4.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_hTRIG5 :   {P.hTRIG5.scaler}   [ {(P.hTRIG5.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHMS_hTRIG6 :   {P.hTRIG6.scaler}   [ {(P.hTRIG6.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]

=:=:=:=:=:=:=:=:=:=:=:  
= HMS Trigger Scalers
=:=:=:=:=:=:=:=:=:=:=: 

HMS_hEL_LO_LO : {H.hEL_LO_LO.scaler}    [ {(H.hEL_LO_LO.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_hEL_LO    : {H.hEL_LO.scaler}   [ {(H.hEL_LO.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_hEL_HI    : {H.hEL_HI.scaler}   [ {(H.hEL_HI.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_hEL_REAL  : {H.hEL_REAL.scaler} [ {(H.hEL_REAL.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_hEL_CLEAN : {H.hEL_CLEAN.scaler}    [ {(H.hEL_CLEAN.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_hSTOF     : {H.hSTOF.scaler}    [ {(H.hSTOF.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]

HMS_hTRIG1 :    {H.hTRIG1.scaler}   [ {(H.hTRIG1.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_hTRIG2 :    {H.hTRIG2.scaler}   [ {(H.hTRIG2.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_hTRIG3 :    {H.hTRIG3.scaler}   [ {(H.hTRIG3.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_hTRIG4 :    {H.hTRIG4.scaler}   [ {(H.hTRIG4.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_hTRIG5 :    {H.hTRIG5.scaler}   [ {(H.hTRIG5.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_hTRIG6 :    {H.hTRIG6.scaler}   [ {(H.hTRIG6.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]

HMS_pTRIG1 :    {H.pTRIG1.scaler}   [ {(H.pTRIG1.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_pTRIG2 :    {H.pTRIG2.scaler}   [ {(H.pTRIG2.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_pTRIG3 :    {H.pTRIG3.scaler}   [ {(H.pTRIG3.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_pTRIG4 :    {H.pTRIG4.scaler}   [ {(H.pTRIG4.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_pTRIG5 :    {H.pTRIG5.scaler}   [ {(H.pTRIG5.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
HMS_pTRIG6 :    {H.pTRIG6.scaler}   [ {(H.pTRIG6.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]

=:=:=:=:
= EDTM
=:=:=:=:

SHMS EDTM Triggers           : {P.EDTM.scaler}
SHMS Estimated EDTM Triggers : {P.EDTM.scalerRate*(P.1MHz.scaler/1000000.):%.0f}
SHMS EDTM Trigger Rate       : {P.EDTM.scalerRate/1000.:%.3f} kHz
SHMS Accepted EDTM Triggers  : {SHMS_edtm_accepted.npassed}

HMS EDTM Triggers            : {H.EDTM.scaler}
HMS Estimated EDTM Triggers  : {H.EDTM.scalerRate*(H.1MHz.scaler/1000000.):%.0f}
HMS EDTM Trigger Rate        : {H.EDTM.scalerRate/1000.:%.3f} kHz
HMS Accepted EDTM Triggers   : {HMS_edtm_accepted.npassed}

=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:
= Live/Dead Time Calculations
=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:

ROC2 Pre-Scaled Ps1 ROC2 Computer Live Time : {(pTRIG1_ROC2.npassed / (P.pTRIG1.scaler/gHC_ti_ps_factors[0]))*100.0:%3.4f} %
ROC2 Pre-Scaled Ps1 ROC2 Computer Dead Time : {100.0 - (pTRIG1_ROC2.npassed / (P.pTRIG1.scaler/gHC_ti_ps_factors[0]))*100.0:%3.4f} %

ROC2 Pre-Scaled Ps2 ROC2 Computer Live Time : {(pTRIG2_ROC2.npassed / (P.pTRIG2.scaler/gHC_ti_ps_factors[1]))*100.0:%3.4f} %
ROC2 Pre-Scaled Ps2 ROC2 Computer Dead Time : {100.0 - (pTRIG2_ROC2.npassed / (P.pTRIG2.scaler/gHC_ti_ps_factors[1]))*100.0:%3.4f} %

ROC2 Pre-Scaled Ps3 ROC2 Computer Live Time : {(pTRIG3_ROC2.npassed / (P.pTRIG3.scaler/gHC_ti_ps_factors[2]))*100.0:%3.4f} %
ROC2 Pre-Scaled Ps3 ROC2 Computer Dead Time : {100.0 - (pTRIG3_ROC2.npassed / (P.pTRIG3.scaler/gHC_ti_ps_factors[2]))*100.0:%3.4f} %

ROC2 Pre-Scaled Ps4 ROC2 Computer Live Time : {(pTRIG4_ROC2.npassed / (P.pTRIG4.scaler/gHC_ti_ps_factors[3]))*100.0:%3.4f} %
ROC2 Pre-Scaled Ps4 ROC2 Computer Dead Time : {100.0 - (pTRIG4_ROC2.npassed / (P.pTRIG4.scaler/gHC_ti_ps_factors[3]))*100.0:%3.4f} %

ROC2 Pre-Scaled Ps6 ROC2 Computer Live Time : {(pTRIG6_ROC2.npassed / (P.pTRIG6.scaler/gHC_ti_ps_factors[5]))*100.0:%3.4f} %
ROC2 Pre-Scaled Ps6 ROC2 Computer Dead Time : {100.0 - (pTRIG6_ROC2.npassed / (P.pTRIG6.scaler/gHC_ti_ps_factors[5]))*100.0:%3.4f} %

ROC2 Pre-Scaled Ps1 Total Live Time (EDTM) : {(SHMS_edtm_accepted.npassed / (P.EDTM.scaler/gHC_ti_ps_factors[0]))*100.0:%3.4f} %
ROC2 Pre-Scaled Ps1 Total Dead Time (EDTM) : {100.0 - (SHMS_edtm_accepted.npassed / (P.EDTM.scaler/gHC_ti_ps_factors[0]))*100.0:%3.4f} %

ROC2 Pre-Scaled Ps2 Total Live Time (EDTM) : {(SHMS_edtm_accepted.npassed / (P.EDTM.scaler/gHC_ti_ps_factors[1]))*100.0:%3.4f} %
ROC2 Pre-Scaled Ps2 Total Dead Time (EDTM) : {100.0 - (SHMS_edtm_accepted.npassed / (P.EDTM.scaler/gHC_ti_ps_factors[1]))*100.0:%3.4f} %

ROC2 Pre-Scaled Ps3 Total Live Time (EDTM) : {(SHMS_edtm_accepted.npassed / (P.EDTM.scaler/gHC_ti_ps_factors[2]))*100.0:%3.4f} %
ROC2 Pre-Scaled Ps3 Total Dead Time (EDTM) : {100.0 - (SHMS_edtm_accepted.npassed / (P.EDTM.scaler/gHC_ti_ps_factors[2]))*100.0:%3.4f} %

ROC2 Pre-Scaled Ps4 Total Live Time (EDTM) : {(SHMS_edtm_accepted.npassed / (P.EDTM.scaler/gHC_ti_ps_factors[3]))*100.0:%3.4f} %
ROC2 Pre-Scaled Ps4 Total Dead Time (EDTM) : {100.0 - (SHMS_edtm_accepted.npassed / (P.EDTM.scaler/gHC_ti_ps_factors[3]))*100.0:%3.4f} %

ROC2 Pre-Scaled Ps6 Total Live Time (EDTM) : {(SHMS_edtm_accepted.npassed / (P.EDTM.scaler/gHC_ti_ps_factors[5]))*100.0:%3.4f} %
ROC2 Pre-Scaled Ps6 Total Dead Time (EDTM) : {100.0 - (SHMS_edtm_accepted.npassed / (P.EDTM.scaler/gHC_ti_ps_factors[5]))*100.0:%3.4f} %

ROC2 OG 6 GeV Electronic Live Time (100, 150) : {100.0 - ((P.pPRE100.scaler - P.pPRE150.scaler)/P.pPRE100.scaler):%3.4f} %
ROC2 OG 6 GeV Electronic Dead Time (100, 150) : {((P.pPRE100.scaler - P.pPRE150.scaler)/P.pPRE100.scaler):%3.4f} %

ROC2 OG 6 GeV Electronic Live Time (100, 200) : {100.0 - ((P.pPRE100.scaler - P.pPRE200.scaler)/P.pPRE100.scaler):%3.4f} %
ROC2 OG 6 GeV Electronic Dead Time (100, 200) : {((P.pPRE100.scaler - P.pPRE200.scaler)/P.pPRE100.scaler):%3.4f} %

ROC2 OG 6 GeV Electronic Live Time (150, 200) : {100.0 - ((P.pPRE150.scaler - P.pPRE200.scaler)/P.pPRE150.scaler):%3.4f} %
ROC2 OG 6 GeV Electronic Dead Time (150, 200) : {((P.pPRE150.scaler - P.pPRE200.scaler)/P.pPRE150.scaler):%3.4f} %

=:=:=:=:=:=:=:
= Hodoscopes
=:=:=:=:=:=:=:

P1X    : {P.S1X.scaler} [ {(P.S1X.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ] AND between + and - sides of P1X 
P1Y    : {P.S1Y.scaler} [ {(P.S1Y.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ] AND between + and - sides of P1Y
P2X    : {P.S2X.scaler} [ {(P.S2X.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ] AND between + and - sides of P2X
P2Y    : {P.S2Y.scaler} [ {(P.S2Y.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ] AND between + and - sides of P2Y

P1XP1Y : {P.S1XS1Y.scaler} [ {(P.S1XS1Y.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ] AND between P1X and P1Y planes 
P2XP2Y : {P.S2XS2Y.scaler} [ {(P.S2XS2Y.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ] AND between P2X and P2Y planes                                           

H1X    : {H.S1X.scaler} [ {(H.S1X.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ] AND between + and - sides of H1X 
H1Y    : {H.S1Y.scaler} [ {(H.S1Y.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ] AND between + and - sides of H1Y
H2X    : {H.S2X.scaler} [ {(H.S2X.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ] AND between + and - sides of H2X
H2Y    : {H.S2Y.scaler} [ {(H.S2Y.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ] AND between + and - sides of H2Y

H1XH1Y : {H.S1XS1Y.scaler} [ {(H.S1XS1Y.scaler/H.1MHz.scalerTime)/1000.:%.3f}  kHz ] AND between H1X and H1Y planes 
H2XH2Y : {H.S2XS2Y.scaler} [ {(H.S2XS2Y.scaler/H.1MHz.scalerTime)/1000.:%.3f}  kHz ] AND between H2X and H2Y planes

=:=:=:=:=:=:=:=:=:=:=:=:=
= Aerogel, HGC, NGC, CAL
=:=:=:=:=:=:=:=:=:=:=:=:=

=:=:=:=:=
= SHMS
=:=:=:=:=
AERO : {P.AERO.scaler}  [ {(P.AERO.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ] Aerogel sum currently not available
HGC  : {P.HCER.scaler}  [ {(P.HCER.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
NGC  : {P.NCER.scaler}  [ {(P.NCER.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
PRLO : {P.PRLO.scaler}  [ {(P.PRLO.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]
PRHI : {P.PRHI.scaler}  [ {(P.PRHI.scaler/P.1MHz.scalerTime)/1000.:%.3f} kHz ]

=:=:=:=:=
= HMS
=:=:=:=:=
CER  : {H.CER.scaler}   [ {(H.CER.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
PRLO : {H.PRLO.scaler}  [ {(H.PRLO.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
PRHI : {H.PRHI.scaler}  [ {(H.PRHI.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
SHLO : {H.SHLO.scaler}  [ {(H.SHLO.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
ASUM : {H.ASUM.scaler}  [ {(H.ASUM.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
BSUM : {H.BSUM.scaler}  [ {(H.BSUM.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
CSUM : {H.CSUM.scaler}  [ {(H.CSUM.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]
DSUM : {H.DSUM.scaler}  [ {(H.DSUM.scaler/H.1MHz.scalerTime)/1000.:%.3f} kHz ]


=:=:=:=:=:=:=:=:=
= SHMS Chambers =
=:=:=:=:=:=:=:=:=

pcut_good_S1_time         Counts: {pcut_good_S1_time.npassed}     / shms_trigs.scaler : {pcut_good_S1_time.npassed / shms_trigs.npassed}       
pcut_good_S2X_time        Counts: {pcut_good_S2X_time.npassed}     / shms_trigs.scaler : {pcut_good_S2X_time.npassed / shms_trigs.npassed}    
pcut_good_S1_S2X_time     Counts: {pcut_good_S1_S2X_time.npassed}     / shms_trigs.scaler : {pcut_good_S1_S2X_time.npassed / shms_trigs.npassed}

Chamber 1 hits > 0                        Counts: {shms_ch1_gt0.npassed} / shms_trigs : {shms_ch1_gt0.npassed / shms_trigs.npassed}         
Chamber 2 hits > 0                        Counts: {shms_ch2_gt0.npassed} / shms_trigs : { shms_ch2_gt0.npassed / shms_trigs.npassed}        
Chamber 2 hits > 0 & Ch 1 hits = 0        Counts: {shms_ch2_gt0_noch1.npassed} / shms_trigs : { shms_ch2_gt0_noch1.npassed / shms_trigs.npassed}  
Chamber 1 hits > 0 & Ch 2 hits = 0        Counts: {shms_ch1_gt0_noch2.npassed} / shms_trigs : {shms_ch1_gt0_noch2.npassed / shms_trigs.npassed}  
Chamber 1 hits = 0 & Ch 2 hits = 0        Counts: {shms_noch1_noch2.npassed} / shms_trigs : {shms_noch1_noch2.npassed / shms_trigs.npassed}  
Chamber 1 > 0 & Ch 2 hits > 0             Counts: {shms_ch_gt0.npassed} / shms_trigs : { shms_ch_gt0.npassed / shms_trigs.npassed}        
Ch 1 hits > 0 & Ch 2 hits > 0 & track     Counts: {shms_ch_gt0_track.npassed} / shms_trigs : { shms_ch_gt0_track.npassed / shms_trigs.npassed}
Chamber 1 > 3 & Ch 2 hits > 3             Counts: {shms_ch_gt4.npassed} / shms_trigs : { shms_ch_gt4.npassed / shms_trigs.npassed}        
Ch 1 hits > 3 & Ch 2 hits > 3 & track     Counts: {shms_ch_gt4_track.npassed} / shms_trigs : { shms_ch_gt4_track.npassed / shms_trigs.npassed}

Add cut on good_S1_S2X_time 

Chamber 1 hits > 0                        Counts: {shms_ch1_gt0_gtime.npassed} / shms_trigs.scaler : {shms_ch1_gt0_gtime.npassed / shms_trigs.npassed}         
Chamber 2 hits > 0                        Counts: {shms_ch2_gt0_gtime.npassed} / shms_trigs.scaler : { shms_ch2_gt0_gtime.npassed / shms_trigs.npassed}        
Chamber 2 hits > 0 & Ch 1 hits = 0        Counts: {shms_ch2_gt0_noch1_gtime.npassed} / shms_trigs.scaler : { shms_ch2_gt0_noch1_gtime.npassed / shms_trigs.npassed}  
Chamber 1 hits > 0 & Ch 2 hits = 0        Counts: {shms_ch1_gt0_noch2_gtime.npassed} / shms_trigs.scaler : {shms_ch1_gt0_noch2_gtime.npassed / shms_trigs.npassed}  
Chamber 1 hits = 0 & Ch 2 hits = 0        Counts: {shms_noch1_noch2_gtime.npassed} / shms_trigs.scaler : {shms_noch1_noch2_gtime.npassed / shms_trigs.npassed}  
Chamber 1 > 0 & Ch 2 hits > 0             Counts: {shms_ch_gt0_gtime.npassed} / shms_trigs.scaler : { shms_ch_gt0_gtime.npassed / shms_trigs.npassed}        
Ch 1 hits > 0 & Ch 2 hits > 0 & track     Counts: {shms_ch_gt0_track_gtime.npassed} / shms_trigs.scaler : { shms_ch_gt0_track_gtime.npassed / shms_trigs.npassed}
Chamber 1 > 3 & Ch 2 hits > 3             Counts: {shms_ch_gt4_gtime.npassed} / shms_trigs.scaler : { shms_ch_gt4_gtime.npassed / shms_trigs.npassed}        
Ch 1 hits > 3 & Ch 2 hits > 3 & track     Counts: {shms_ch_gt4_track_gtime.npassed} / shms_trigs.scaler : { shms_ch_gt4_track_gtime.npassed / shms_trigs.npassed}

shmsDC1Planes_large  Counts: {shmsDC1Planes_large.npassed} / shms_trigs.scaler : {shmsDC1Planes_large.npassed / shms_trigs.npassed}
shmsDC2Planes_large  Counts: {shmsDC2Planes_large.npassed} / shms_trigs.scaler : {shmsDC2Planes_large.npassed / shms_trigs.npassed}  

shmsDC1Planes6       Counts: {shmsDC1Planes6hits.npassed} / shms_trigs.scaler : {shmsDC1Planes6hits.npassed / shms_trigs.npassed}
shmsDC2Planes6       Counts: {shmsDC2Planes6hits.npassed} / shms_trigs.scaler : {shmsDC2Planes6hits.npassed / shms_trigs.npassed}  

shmsDC1x1Planes5     Counts: {shmsDC1_5hits_x1.npassed} eff : {shmsDC1_6hits_x1.npassed / shmsDC1_5hits_x1.npassed}
shmsDC1u1Planes5     Counts: {shmsDC1_5hits_u1.npassed} eff : {shmsDC1_6hits_u1.npassed / shmsDC1_5hits_u1.npassed}
shmsDC1u2Planes5     Counts: {shmsDC1_5hits_u2.npassed} eff : {shmsDC1_6hits_u2.npassed / shmsDC1_5hits_u2.npassed}
shmsDC1v1Planes5     Counts: {shmsDC1_5hits_v1.npassed} eff : {shmsDC1_6hits_v1.npassed / shmsDC1_5hits_v1.npassed}
shmsDC1v2Planes5     Counts: {shmsDC1_5hits_v2.npassed} eff : {shmsDC1_6hits_v2.npassed / shmsDC1_5hits_v2.npassed}
shmsDC1x2Planes5     Counts: {shmsDC1_5hits_x2.npassed} eff : {shmsDC1_6hits_x2.npassed / shmsDC1_5hits_x2.npassed}

shmsDC2x1Planes5     Counts: {shmsDC2_5hits_x1.npassed} eff : {shmsDC2_6hits_x1.npassed / shmsDC2_5hits_x1.npassed}
shmsDC2u1Planes5     Counts: {shmsDC2_5hits_u1.npassed} eff : {shmsDC2_6hits_u1.npassed / shmsDC2_5hits_u1.npassed}
shmsDC2u2Planes5     Counts: {shmsDC2_5hits_u2.npassed} eff : {shmsDC2_6hits_u2.npassed / shmsDC2_5hits_u2.npassed}
shmsDC2v1Planes5     Counts: {shmsDC2_5hits_v1.npassed} eff : {shmsDC2_6hits_v1.npassed / shmsDC2_5hits_v1.npassed}
shmsDC2v2Planes5     Counts: {shmsDC2_5hits_v2.npassed} eff : {shmsDC2_6hits_v2.npassed / shmsDC2_5hits_v2.npassed}
shmsDC2x2Planes5     Counts: {shmsDC2_5hits_x2.npassed} eff : {shmsDC2_6hits_x2.npassed / shmsDC2_5hits_x2.npassed}

I'm pretty sure that these are the "raw" number of counts. "Raw" means one or more hits per dc plane.
shmsDC1_1hit_x1: {shmsDC1_1hit_x1.npassed}      
shmsDC1_1hit_u1: {shmsDC1_1hit_u1.npassed}      
shmsDC1_1hit_u2: {shmsDC1_1hit_u2.npassed}      
shmsDC1_1hit_v1: {shmsDC1_1hit_v1.npassed}      
shmsDC1_1hit_v2: {shmsDC1_1hit_v2.npassed}      
shmsDC1_1hit_x2: {shmsDC1_1hit_x2.npassed}      

shmsDC2_1hit_x1: {shmsDC2_1hit_x1.npassed}      
shmsDC2_1hit_u1: {shmsDC2_1hit_u1.npassed}      
shmsDC2_1hit_u2: {shmsDC2_1hit_u2.npassed}      
shmsDC2_1hit_v1: {shmsDC2_1hit_v1.npassed}      
shmsDC2_1hit_v2: {shmsDC2_1hit_v2.npassed}      
shmsDC2_1hit_x2: {shmsDC2_1hit_x2.npassed}      

"Good" means one or two hits per dc plane.
pcut_goodHDC1x1: {pcut_goodHDC1x1.npassed}  eff : {pcut_goodHDC1x1.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goodHDC1u2: {pcut_goodHDC1u2.npassed}  eff : {pcut_goodHDC1u2.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goodHDC1u1: {pcut_goodHDC1u1.npassed}  eff : {pcut_goodHDC1u1.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goodHDC1v1: {pcut_goodHDC1v1.npassed}  eff : {pcut_goodHDC1v1.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goodHDC1v2: {pcut_goodHDC1v2.npassed}  eff : {pcut_goodHDC1v2.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goodHDC1x2: {pcut_goodHDC1x2.npassed}  eff : {pcut_goodHDC1x2.npassed/(shms_trigs.npassed+.0001):%5.3f}

pcut_goodHDC2x1: {pcut_goodHDC2x1.npassed}  eff : {pcut_goodHDC2x1.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goodHDC2u2: {pcut_goodHDC2u2.npassed}  eff : {pcut_goodHDC2u2.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goodHDC2u1: {pcut_goodHDC2u1.npassed}  eff : {pcut_goodHDC2u1.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goodHDC2v1: {pcut_goodHDC2v1.npassed}  eff : {pcut_goodHDC2v1.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goodHDC2v2: {pcut_goodHDC2v2.npassed}  eff : {pcut_goodHDC2v2.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goodHDC2x2: {pcut_goodHDC2x2.npassed}  eff : {pcut_goodHDC2x2.npassed/(shms_trigs.npassed+.0001):%5.3f}

pcut_goodHDC1:   {pcut_goodHDC1.npassed}  eff : {pcut_goodHDC1.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goodHDC2:   {pcut_goodHDC2.npassed}  eff : {pcut_goodHDC2.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_bothgood:   {pcut_bothGood.npassed}  eff : {pcut_bothGood.npassed/(shms_trigs.npassed+.0001):%5.3f}

pcut_realhdc1x1: {pcut_realhdc1x1.npassed}
pcut_realhdc1u2: {pcut_realhdc1u2.npassed}
pcut_realhdc1u1: {pcut_realhdc1u1.npassed}
pcut_realhdc1v1: {pcut_realhdc1v1.npassed}
pcut_realhdc1v2: {pcut_realhdc1v2.npassed}
pcut_realhdc1x2: {pcut_realhdc1x2.npassed}

pcut_realhdc2x1: {pcut_realhdc2x1.npassed}
pcut_realhdc2u2: {pcut_realhdc2u2.npassed}
pcut_realhdc2u1: {pcut_realhdc2u1.npassed}
pcut_realhdc2v1: {pcut_realhdc2v1.npassed}
pcut_realhdc2v2: {pcut_realhdc2v2.npassed}
pcut_realhdc2x2: {pcut_realhdc2x2.npassed}
                
**HODOSCOPE**
"Any" means one or more hits per scint plane.
pcut_anys1x : {pcut_anys1x.npassed}      eff: {pcut_anys1x.npassed/(shms_trigs.npassed+.0001):%5.3f}    BAD = ??
pcut_anys1y : {pcut_anys1y.npassed}      eff: {pcut_anys1y.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_anys2x : {pcut_anys2x.npassed}      eff: {pcut_anys2x.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_anys2y : {pcut_anys2y.npassed}      eff: {pcut_anys2y.npassed/(shms_trigs.npassed+.0001):%5.3f} 

"Good" means one or two hits per scint plane.
pcut_goods1x : {pcut_goods1x.npassed}     eff: {pcut_goods1x.npassed/(shms_trigs.npassed+.0001):%5.3f}   BAD = ??
pcut_goods1y : {pcut_goods1y.npassed}     eff: {pcut_goods1y.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goods1  : {pcut_goods1.npassed}     eff: {pcut_goods1.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goods2x : {pcut_goods2x.npassed}     eff: {pcut_goods2x.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goods2y : {pcut_goods2y.npassed}     eff: {pcut_goods2y.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goods2  : {pcut_goods2.npassed}     eff: {pcut_goods2.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_goods1s2: {pcut_goods1s2.npassed}     eff: {pcut_goods1s2.npassed/(shms_trigs.npassed+.0001):%5.3f}

**TRACKING**
pcut_FoundTrack  :{pcut_FoundTrack.npassed}  eff: {pcut_FoundTrack.npassed/(shms_trigs.npassed+.0001):%5.3f} BAD = ??
pcut_Found1Track :{pcut_Found1Track.npassed}  eff: {pcut_Found1Track.npassed/(shms_trigs.npassed+.0001):%5.3f} 
pcut_Found2Track :{pcut_Found2Track.npassed}   eff: {pcut_Found2Track.npassed/(shms_trigs.npassed+.0001):%5.3f} 
pcut_Found3Track :{pcut_Found3Track.npassed}    eff: {pcut_Found3Track.npassed/(shms_trigs.npassed+.0001):%5.3f} 
pcut_Found4Track :{pcut_Found4Track.npassed}    eff: {pcut_Found4Track.npassed/(shms_trigs.npassed+.0001):%5.3f} 

pcut_CleanTrack :{pcut_CleanTrack.npassed}  eff: {pcut_CleanTrack.npassed/(shms_trigs.npassed+.0001):%5.3f}     BAD = ??
pcut_Clean1Track:{pcut_Clean1Track.npassed}  eff: {pcut_Clean1Track.npassed/(shms_trigs.npassed+.0001):%5.3f} 
pcut_Clean2Track:{pcut_Clean2Track.npassed}    eff: {pcut_Clean2Track.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_Clean3Track:{pcut_Clean3Track.npassed}    eff: {pcut_Clean3Track.npassed/(shms_trigs.npassed+.0001):%5.3f}
pcut_Clean4Track:{pcut_Clean4Track.npassed}    eff: {pcut_Clean4Track.npassed/(shms_trigs.npassed+.0001):%5.3f}

**CHERENKOVS AND CAL**
pcut_cer_ng_elec   :      {pcut_cer_ng_elec.npassed}
pcut_cer_ng_pi     :      {pcut_cer_ng_pi.npassed}
pcut_cer_hg_elec   :      {pcut_cer_hg_elec.npassed}
pcut_cer_hg_pi     :      {pcut_cer_hg_pi.npassed}
pcut_cer_pi_both   :      {pcut_cer_pi_both.npassed}
pcut_cer_elec_both :      {pcut_cer_elec_both.npassed}
pcut_cal_elec      :      {pcut_cal_elec.npassed}
pcut_cal_pi        :      {pcut_cal_pi.npassed}
pcut_elec_all      :      {pcut_elec_all.npassed}
pcut_pi_all        :      {pcut_pi_all.npassed} 

pcut_CleanTrack_cer_elec : {pcut_CleanTrack_cer_elec.npassed} 
pcut_p1hit1_cer_elec     : {pcut_p1hit1_cer_elec.npassed}
pcut_CleanTrack_cal_elec : {pcut_CleanTrack_cal_elec.npassed} 
pcut_p1hit1_cal_elec     : {pcut_p1hit1_cal_elec.npassed}

******************************
* SHMS TRACKING EFFICIENCIES *
******************************

ptrig                          : {SHMS_event.npassed}
phitslt = passed hits/cham     : {shmsHitsLt.npassed}
phitsplanes = +planes >= 5/6   : {shmsHitsPlanes.npassed}
phitsplanessps = + sps         : {pSpacePoints.npassed}
phitsplanesspsstubs +stub      : {pSpacePointsStub.npassed}
psfoundtrack                   : {pcut_FoundTrack.npassed}
pscleantrack                   : {pcut_CleanTrack.npassed}
pstublt = passed stub tests    : {pStubLT.npassed}
p1hitslt                       : {shms1HitsLt.npassed}
p2hitslt                       : {shms2HitsLt.npassed}
p1planesgt                     : {shmsDC1PlanesGT.npassed}
p2planesgt                     : {shmsDC2PlanesGT.npassed}
pplanesgt = gt 5 planes/cham   : {shmsPlanesGT.npassed}
f1pspacepoints                 : {f1PSpacePoints.npassed}
f2pspacepoints                 : {f2PSpacePoints.npassed}
ptest1=p hits/planes, f sp     : {pTest1.npassed}
ptest2=p sp, f stubs           : {pTest2.npassed}
pdcanylarge    		       : {shmsDCany_large.npassed}
pgoodbetanotrk		       : {shmsGoodBetanotrk.npassed}
pdid                           : {shmsScinDid.npassed}
pdide                          : {shmsScinDide.npassed}
pdidh                          : {shmsScinDidh.npassed}
pscinshould                    : {shmsScinShould.npassed}
pscinshoulde                   : {shmsScinShoulde.npassed}
pscinshouh                     : {shmsScinShouldh.npassed}
SING FID TRACK EFFIC           : {shmsScinDid.npassed / (shmsScinShould.npassed+0.0001):%8.4f} +- {(sqrt(shmsScinShould.npassed-shmsScinDid.npassed) / (shmsScinShould.npassed+.0001)):%8.4f}
E SING FID TRACK EFFIC         : {shmsScinDide.npassed / (shmsScinShoulde.npassed+0.0001):%8.4f} +- {(sqrt(shmsScinShoulde.npassed-shmsScinDide.npassed) / (shmsScinShoulde.npassed+.0001)):%8.4f}
HADRON SING FID TRACK EFFIC    : {shmsScinDidh.npassed / (shmsScinShouldh.npassed+0.0001):%8.4f} +- {(sqrt(shmsScinShouldh.npassed-shmsScinDidh.npassed) / (shmsScinShouldh.npassed+.0001)):%8.4f}

=:=:=:=:=:=:=:=:=
= HMS Chambers  =
=:=:=:=:=:=:=:=:=

hmsDC1Planes_large  Counts:{hmsDC1Planes_large.npassed} /hms_trigs : {hmsDC1Planes_large.npassed/hms_trigs.npassed}
hmsDC2Planes_large  Counts:{hmsDC2Planes_large.npassed}  /hms_trigs : {hmsDC2Planes_large.npassed/hms_trigs.npassed}  

hmsDC1Planes6       Counts:  {hmsDC1Planes6hits.npassed} /hms_trigs : {hmsDC1Planes6hits.npassed/hms_trigs.npassed}
hmsDC2Planes6       Counts:  {hmsDC2Planes6hits.npassed} /hms_trigs : {hmsDC2Planes6hits.npassed/hms_trigs.npassed}  

hmsDC1x1Planes5     Counts:  {hmsDC1_5hits_x1.npassed} eff : {hmsDC1_6hits_x1.npassed/hmsDC1_5hits_x1.npassed}
hmsDC1u1Planes5     Counts:  {hmsDC1_5hits_u1.npassed} eff : {hmsDC1_6hits_u1.npassed/hmsDC1_5hits_u1.npassed}
hmsDC1u2Planes5     Counts:  {hmsDC1_5hits_u2.npassed} eff : {hmsDC1_6hits_u2.npassed/hmsDC1_5hits_u2.npassed}
hmsDC1v1Planes5     Counts:  {hmsDC1_5hits_v1.npassed} eff : {hmsDC1_6hits_v1.npassed/hmsDC1_5hits_v1.npassed}
hmsDC1v2Planes5     Counts:  {hmsDC1_5hits_v2.npassed} eff : {hmsDC1_6hits_v2.npassed/hmsDC1_5hits_v2.npassed}
hmsDC1x2Planes5     Counts:  {hmsDC1_5hits_x2.npassed} eff : {hmsDC1_6hits_x2.npassed/hmsDC1_5hits_x2.npassed}

hmsDC2x1Planes5     Counts:  {hmsDC2_5hits_x1.npassed} eff : {hmsDC2_6hits_x1.npassed/hmsDC2_5hits_x1.npassed}
hmsDC2u1Planes5     Counts:  {hmsDC2_5hits_u1.npassed} eff : {hmsDC2_6hits_u1.npassed/hmsDC2_5hits_u1.npassed}
hmsDC2u2Planes5     Counts:  {hmsDC2_5hits_u2.npassed} eff : {hmsDC2_6hits_u2.npassed/hmsDC2_5hits_u2.npassed}
hmsDC2v1Planes5     Counts:  {hmsDC2_5hits_v1.npassed} eff : {hmsDC2_6hits_v1.npassed/hmsDC2_5hits_v1.npassed}
hmsDC2v2Planes5     Counts:  {hmsDC2_5hits_v2.npassed} eff : {hmsDC2_6hits_v2.npassed/hmsDC2_5hits_v2.npassed}
hmsDC2x2Planes5     Counts:  {hmsDC2_5hits_x2.npassed} eff : {hmsDC2_6hits_x2.npassed/hmsDC2_5hits_x2.npassed}

I'm pretty sure that these are the "raw" number of counts. "Raw" means one or more hits per dc plane.
hmsDC1_1hit_x1:      {hmsDC1_1hit_x1.npassed}       
hmsDC1_1hit_u1:      {hmsDC1_1hit_u1.npassed}       
hmsDC1_1hit_u2:      {hmsDC1_1hit_u2.npassed}       
hmsDC1_1hit_v1:      {hmsDC1_1hit_v1.npassed}       
hmsDC1_1hit_u2:      {hmsDC1_1hit_u2.npassed}       
hmsDC1_1hit_x2:      {hmsDC1_1hit_x2.npassed}       

hmsDC2_1hit_x1:      {hmsDC2_1hit_x1.npassed}       
hmsDC2_1hit_u1:      {hmsDC2_1hit_u1.npassed}       
hmsDC2_1hit_u2:      {hmsDC2_1hit_u2.npassed}       
hmsDC2_1hit_v1:      {hmsDC2_1hit_v1.npassed}       
hmsDC2_1hit_u2:      {hmsDC2_1hit_u2.npassed}       
hmsDC2_1hit_x2:      {hmsDC2_1hit_x2.npassed}       

"Good" means one or two hits per dc plane.
hcut_goodHDC1x1:         {hcut_goodHDC1x1.npassed}  eff : {hcut_goodHDC1x1.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goodHDC1u2:         {hcut_goodHDC1u2.npassed}  eff : {hcut_goodHDC1u2.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goodHDC1u1:             {hcut_goodHDC1u1.npassed}  eff : {hcut_goodHDC1u1.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goodHDC1v1:         {hcut_goodHDC1v1.npassed}  eff : {hcut_goodHDC1v1.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goodHDC1v2:         {hcut_goodHDC1v2.npassed}  eff : {hcut_goodHDC1v2.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goodHDC1x2:         {hcut_goodHDC1x2.npassed}  eff : {hcut_goodHDC1x2.npassed/(hms_trigs.npassed+.0001):%5.3f}

hcut_goodHDC2x1:         {hcut_goodHDC2x1.npassed}  eff : {hcut_goodHDC2x1.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goodHDC2u2:         {hcut_goodHDC2u2.npassed}  eff : {hcut_goodHDC2u2.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goodHDC2u1:         {hcut_goodHDC2u1.npassed}  eff : {hcut_goodHDC2u1.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goodHDC2v1:         {hcut_goodHDC2v1.npassed}  eff : {hcut_goodHDC2v1.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goodHDC2v2:         {hcut_goodHDC2v2.npassed}  eff : {hcut_goodHDC2v2.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goodHDC2x2:         {hcut_goodHDC2x2.npassed}  eff : {hcut_goodHDC2x2.npassed/(hms_trigs.npassed+.0001):%5.3f}

hcut_goodHDC1:       {hcut_goodHDC1.npassed}    eff : {hcut_goodHDC1.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goodHDC2:       {hcut_goodHDC2.npassed}    eff : {hcut_goodHDC2.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_bothgood:       {hcut_bothGood.npassed}    eff : {hcut_bothGood.npassed/(hms_trigs.npassed+.0001):%5.3f}

hcut_realhdc1x1:         {hcut_realhdc1x1.npassed}
hcut_realhdc1u2:         {hcut_realhdc1u2.npassed}
hcut_realhdc1u1:             {hcut_realhdc1u1.npassed}
hcut_realhdc1v1:         {hcut_realhdc1v1.npassed}
hcut_realhdc1v2:         {hcut_realhdc1v2.npassed}
hcut_realhdc1x2:         {hcut_realhdc1x2.npassed}

hcut_realhdc2x1:         {hcut_realhdc2x1.npassed}
hcut_realhdc2u2:         {hcut_realhdc2u2.npassed}
hcut_realhdc2u1:         {hcut_realhdc2u1.npassed}
hcut_realhdc2v1:         {hcut_realhdc2v1.npassed}
hcut_realhdc2v2:         {hcut_realhdc2v2.npassed}
hcut_realhdc2x2:         {hcut_realhdc2x2.npassed}
                   
**HODOSCOPE**
"Any" means one or more hits per scint plane.
hcut_anys1x:             {hcut_anys1x.npassed}  eff: {hcut_anys1x.npassed/(hms_trigs.npassed+.0001):%5.3f}  BAD = ??
hcut_anys1y:                 {hcut_anys1y.npassed}  eff: {hcut_anys1y.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_anys2x:                 {hcut_anys2x.npassed}  eff: {hcut_anys2x.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_anys2y:                 {hcut_anys2y.npassed}  eff: {hcut_anys2y.npassed/(hms_trigs.npassed+.0001):%5.3f} 

"Good" means one or two hits per scint plane.
hcut_goods1x:        {hcut_goods1x.npassed}  eff: {hcut_goods1x.npassed/(hms_trigs.npassed+.0001):%5.3f}    BAD = ??
hcut_goods1y:        {hcut_goods1y.npassed}  eff: {hcut_goods1y.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goods1:         {hcut_goods1.npassed}   eff: {hcut_goods1.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goods2x:        {hcut_goods2x.npassed}  eff: {hcut_goods2x.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goods2y:        {hcut_goods2y.npassed}  eff: {hcut_goods2y.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goods2:         {hcut_goods2.npassed}   eff: {hcut_goods2.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_goods1s2:       {hcut_goods1s2.npassed}       eff: {hcut_goods1s2.npassed/(hms_trigs.npassed+.0001):%5.3f}

hcut_FoundTrack:         {hcut_FoundTrack.npassed}   eff: {hcut_FoundTrack.npassed/(hms_trigs.npassed+.0001):%5.3f} BAD = ??
hcut_Found1Track:        {hcut_Found1Track.npassed}  eff: {hcut_Found1Track.npassed/(hms_trigs.npassed+.0001):%5.3f} 
hcut_Found2Track:        {hcut_Found2Track.npassed}  eff: {hcut_Found2Track.npassed/(hms_trigs.npassed+.0001):%5.3f} 
hcut_Found3Track:        {hcut_Found3Track.npassed}  eff: {hcut_Found3Track.npassed/(hms_trigs.npassed+.0001):%5.3f} 
hcut_Found4Track:        {hcut_Found4Track.npassed}  eff: {hcut_Found4Track.npassed/(hms_trigs.npassed+.0001):%5.3f} 

hcut_Clean1Track:        {hcut_Clean1Track.npassed}  eff: {hcut_Clean1Track.npassed/(hms_trigs.npassed+.0001):%5.3f}     BAD = ??
hcut_Clean2Track:        {hcut_Clean2Track.npassed}  eff: {hcut_Clean2Track.npassed/(hms_trigs.npassed+.0001):%5.3f} 
hcut_Clean3Track:        {hcut_Clean3Track.npassed}  eff: {hcut_Clean3Track.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_Clean4Track:        {hcut_Clean4Track.npassed}  eff: {hcut_Clean4Track.npassed/(hms_trigs.npassed+.0001):%5.3f}
hcut_CleanTrack:         {hcut_CleanTrack.npassed}   eff: {hcut_CleanTrack.npassed/(hms_trigs.npassed+.0001):%5.3f}

**CHERENKOVS AND CAL**
hcut_cer_pmt1_elec:      {hcut_cer_pmt1_elec.npassed}
hcut_cer_pmt2_elect:     {hcut_cer_pmt2_elec.npassed}
hcut_cer_elec:           {hcut_cer_elec.npassed}
hcut_cer_pi:             {hcut_cer_pi.npassed}

*****************************
*HMS TRACKING EFFICIENCIES *
*****************************

htrig                          :   {hms_trigs.npassed}
hhitslt = passed hits/cham     :   {hmsHitsLt.npassed}
hhitsplanes = +planes >= 5/6   :   {hmsHitsPlanes.npassed}
hhitsplanessps = + sps         :   {hSpacePoints.npassed}
hhitsplanesspsstubs +stub      :   {hSpacePointsStub.npassed}
hsfoundtrack                   :   {hcut_FoundTrack.npassed}
hscleantrack                   :   {hcut_CleanTrack.npassed}
hstublt = passed stub tests    :   {hStubLT.npassed}
h1hitslt                       :   {hms1HitsLt.npassed}
h2hitslt                       :   {hms2HitsLt.npassed}
h1planesgt                     :   {hmsDC1PlanesGT.npassed}
h2planesgt                     :   {hmsDC2PlanesGT.npassed}
hplanesgt = gt 5 planes/cham   :   {hmsPlanesGT.npassed}
f1hspacepoints                 :   {f1HSpacePoints.npassed}
f2hspacepoints                 :   {f2HSpacePoints.npassed}
htest1=p hits/planes, f sp     :   {hTest1.npassed}
htest2=p sp, f stubs           :   {hTest2.npassed}
hdcanylarge                    :   {hmsDCany_large.npassed}
hdc16hits                      :   {hmsDC1Planes6hits.npassed}
hdc26hits		             :   {hmsDC2Planes6hits.npassed}
hgoodbetanotrk 		       :   {HMSGoodBetanotrk.npassed}
hdid                           :   {HMSScinDid.npassed}
hdide                          :   {HMSScinDide.npassed}
hdidh                          :   {HMSScinDidh.npassed}
hscinshould                    :   {HMSScinShould.npassed}
hscinshoulde                   :   {HMSScinShoulde.npassed}
hscinshouldh                   :   {HMSScinShouldh.npassed}
SING FID TRACK EFFIC           :   {HMSScinDid.npassed/(HMSScinShould.npassed+0.0001):%8.4f} +- {(sqrt(HMSScinShould.npassed-HMSScinDid.npassed)/(HMSScinShould.npassed+.0001)):%8.4f}
E SING FID TRACK EFFIC         :   {HMSScinDide.npassed/(HMSScinShoulde.npassed+0.0001):%8.4f} +- {(sqrt(HMSScinShoulde.npassed-HMSScinDide.npassed)/(HMSScinShoulde.npassed+.0001)):%8.4f}
HADRON SING FID TRACK EFFIC    :   {HMSScinDidh.npassed/(HMSScinShouldh.npassed+0.0001):%8.4f} +- {(sqrt(HMSScinShouldh.npassed-HMSScinDidh.npassed)/(HMSScinShouldh.npassed+.0001)):%8.4f}



=:=:=:=:=:=:=:=:=:=:=:=:=
=     SHMS Cerenkovs    =
=:=:=:=:=:=:=:=:=:=:=:=:=

***************
* HGC Cerenkov 
***************

Good Track Requirements:
   1. Only one track found in the focal plane
   2. chisq/dof < {phgcer_red_chi2_max:%5.1f}
   3. {phgcer_beta_min:%5.3f} < beta < {phgcer_beta_max:%5.3f}
   4. {phgcer_enorm_min:%5.3f} < calorimeter energy < {phgcer_enorm_max:%5.3f}
Threshold set at {phgcer_npe_thresh:%4.1f}
*HGC EFF* 4PMTs
SHMS HGC Region 1 efficiency: {SHMS_hgcer_track_fired_region_1.npassed/SHMS_hgcer_track_matched_region_1.npassed} = {SHMS_hgcer_track_fired_region_1.npassed} of {SHMS_hgcer_track_matched_region_1.npassed} good tracks.
SHMS HGC Region 2 efficiency: {SHMS_hgcer_track_fired_region_2.npassed/SHMS_hgcer_track_matched_region_2.npassed} = {SHMS_hgcer_track_fired_region_2.npassed} of {SHMS_hgcer_track_matched_region_2.npassed} good tracks.
SHMS HGC Region 3 efficiency: {SHMS_hgcer_track_fired_region_3.npassed/SHMS_hgcer_track_matched_region_3.npassed} = {SHMS_hgcer_track_fired_region_3.npassed} of {SHMS_hgcer_track_matched_region_3.npassed} good tracks.
SHMS HGC Region 4 efficiency: {SHMS_hgcer_track_fired_region_4.npassed/SHMS_hgcer_track_matched_region_4.npassed} = {SHMS_hgcer_track_fired_region_4.npassed} of {SHMS_hgcer_track_matched_region_4.npassed} good tracks.
Overall HGC Efficiency:       {SHMS_hgcer_track_fired_tot.npassed/SHMS_hgcer_track_matched_tot.npassed} = {SHMS_hgcer_track_fired_tot.npassed} of {SHMS_hgcer_track_matched_tot.npassed} good tracks.

***************
* NGC Cerenkov 
***************

Good Track Requirements:
   1. Only one track found in the focal plane
   2. chisq/dof < {pngcer_red_chi2_max:%5.1f}
   3. {pngcer_beta_min:%5.3f} < beta < {pngcer_beta_max:%5.3f}
   4. {pngcer_enorm_min:%5.3f} < calorimeter energy < {pngcer_enorm_max:%5.3f}
Threshold set at {pngcer_npe_thresh:%4.1f}
*NGC EFF* 4PMTs
SHMS NGC Region 1 efficiency: {SHMS_ngcer_track_fired_region_1.npassed/SHMS_ngcer_track_matched_region_1.npassed} = {SHMS_ngcer_track_fired_region_1.npassed} of {SHMS_ngcer_track_matched_region_1.npassed} good tracks.
SHMS NGC Region 2 efficiency: {SHMS_ngcer_track_fired_region_2.npassed/SHMS_ngcer_track_matched_region_2.npassed} = {SHMS_ngcer_track_fired_region_2.npassed} of {SHMS_ngcer_track_matched_region_2.npassed} good tracks.
SHMS NGC Region 3 efficiency: {SHMS_ngcer_track_fired_region_3.npassed/SHMS_ngcer_track_matched_region_3.npassed} = {SHMS_ngcer_track_fired_region_3.npassed} of {SHMS_ngcer_track_matched_region_3.npassed} good tracks.
SHMS NGC Region 4 efficiency: {SHMS_ngcer_track_fired_region_4.npassed/SHMS_ngcer_track_matched_region_4.npassed} = {SHMS_ngcer_track_fired_region_4.npassed} of {SHMS_ngcer_track_matched_region_4.npassed} good tracks.
Overall NGC Efficiency:       {SHMS_ngcer_track_fired_tot.npassed/SHMS_ngcer_track_matched_tot.npassed} = {SHMS_ngcer_track_fired_tot.npassed} of {SHMS_ngcer_track_matched_tot.npassed} good tracks.

**********
* Aerogel  
**********

Good Track Requirements:
   1. Only one track found in the focal plane 
   2. chisq/dof < {paero_red_chi2_max:%5.1f}
   3. {paero_beta_min:%5.3f} < beta < {paero_beta_max:%5.3f}
   4. {paero_enorm_min:%5.3f} < calorimeter energy < {paero_enorm_max:%5.3f}
   5. {paero_dp_min:%5.3f} < delta p (dp) < {paero_dp_max:%5.3f} //added because paero_cuts.param has this as a cut 
Threshold set at {paero_npe_thresh:%4.1f}
*AEROGEL EFF* 7 PMT pairs
SHMS AERO Region 1 efficiency: {SHMS_aero_track_fired_region_1.npassed/SHMS_aero_track_matched_region_1.npassed} = {SHMS_aero_track_fired_region_1.npassed} of {SHMS_aero_track_matched_region_1.npassed} good tracks.
SHMS AERO Region 2 efficiency: {SHMS_aero_track_fired_region_2.npassed/SHMS_aero_track_matched_region_2.npassed} = {SHMS_aero_track_fired_region_2.npassed} of {SHMS_aero_track_matched_region_2.npassed} good tracks.
SHMS AERO Region 3 efficiency: {SHMS_aero_track_fired_region_3.npassed/SHMS_aero_track_matched_region_3.npassed} = {SHMS_aero_track_fired_region_3.npassed} of {SHMS_aero_track_matched_region_3.npassed} good tracks.
SHMS AERO Region 4 efficiency: {SHMS_aero_track_fired_region_4.npassed/SHMS_aero_track_matched_region_4.npassed} = {SHMS_aero_track_fired_region_4.npassed} of {SHMS_aero_track_matched_region_4.npassed} good tracks.
SHMS AERO Region 5 efficiency: {SHMS_aero_track_fired_region_5.npassed/SHMS_aero_track_matched_region_5.npassed} = {SHMS_aero_track_fired_region_5.npassed} of {SHMS_aero_track_matched_region_5.npassed} good tracks.
SHMS AERO Region 6 efficiency: {SHMS_aero_track_fired_region_6.npassed/SHMS_aero_track_matched_region_6.npassed} = {SHMS_aero_track_fired_region_6.npassed} of {SHMS_aero_track_matched_region_6.npassed} good tracks.
SHMS AERO Region 7 efficiency: {SHMS_aero_track_fired_region_7.npassed/SHMS_aero_track_matched_region_7.npassed} = {SHMS_aero_track_fired_region_7.npassed} of {SHMS_aero_track_matched_region_7.npassed} good tracks.
Overall AERO Efficiency:       {SHMS_aero_track_fired_tot.npassed/SHMS_aero_track_matched_tot.npassed} = {SHMS_aero_track_matched_tot.npassed} of {SHMS_aero_track_matched_tot.npassed} good tracks.

=:=:=:=:=:=:=:=:=:=:=:=:=
=      HMS Cerenkov     =
=:=:=:=:=:=:=:=:=:=:=:=:=

Good Track Requirements:
   1. Only one track found in the focal plane
   2. chisq/dof < {hcer_red_chi2_max:%5.1f}
   3. {hcer_beta_min:%5.3f} < beta < {hcer_beta_max:%5.3f}
   4. {hcer_enorm_min:%5.3f} < calorimeter energy < {hcer_enorm_max:%5.3f}
Threshold set at {hcer_npe_thresh:%4.1f}
*HCER EFF* 2PMTs
HMS Region 1 efficiency: {HMS_hcer_track_fired_region_1.npassed/HMS_hcer_track_matched_region_1.npassed} = {HMS_hcer_track_fired_region_1.npassed} of {HMS_hcer_track_matched_region_1.npassed} good tracks.
HMS Region 2 efficiency: {HMS_hcer_track_fired_region_2.npassed/HMS_hcer_track_matched_region_2.npassed} = {HMS_hcer_track_fired_region_2.npassed} of {HMS_hcer_track_matched_region_2.npassed} good tracks.
Overall HCER Efficiency: {HMS_hcer_track_fired_tot.npassed/HMS_hcer_track_matched_tot.npassed} = {HMS_hcer_track_fired_tot.npassed} of {HMS_hcer_track_matched_tot.npassed} good tracks.


****************************
* Calorimeter Efficiencies *
****************************

=:=:=:=:=
= SHMS  =
=:=:=:=:=
Efficiencies for calorimeter is the fraction of times block was hit when track
with chisquared/dof < {pstat_cal_maxchisq:%5.1f} came within {pstat_cal_slop:%4.1f} cm of the center.
and scal_npe_sum  > 3.0 (hardwired). (is this still true?)

Events examined = strig       = {shms_trigs.scaler.npassed}
Tracks found    = scleantrack = {pcut_CleanTrack.npassed}
//Tracks passing chisquared cut = (pstat_cal_numevents:%7d) (in previous template, do we need this here?)

shmsPreShower        Counts: {P.cal.stat_trksum1} eff : {P.cal.stat_hitsum1 / P.cal.stat_trksum1}
shmsShowerArray      Counts: {P.cal.stat_trksum_array} eff : {P.cal.stat_hitsum_array / P.cal.stat_trksum_array}

=:=:=:=:=
=  HMS  =
=:=:=:=:=
Efficiencies for calorimeter is the fraction of times block was hit when track
with chisquared/dof < {hstat_cal_maxchisq:%5.1f} came within {hstat_cal_slop:%4.1f} cm of the center.
and scal_npe_sum  > 3.0 (hardwired). (is this still true?)

Events examined = strig       = {hms_trigs.npassed}
Tracks found    = scleantrack = {hcut_CleanTrack.npassed}
//Tracks passing chisquared cut = (hstat_cal_numevents:%7d) (in previous template, do we need this here?)

hA       Counts: {H.cal.stat_trksum1} eff : {H.cal.stat_hitsum1 / H.cal.stat_trksum1}
hB       Counts: {H.cal.stat_trksum2} eff : {H.cal.stat_hitsum2 / H.cal.stat_trksum2}
hC       Counts: {H.cal.stat_trksum3} eff : {H.cal.stat_hitsum3 / H.cal.stat_trksum3}
hD       Counts: {H.cal.stat_trksum4} eff : {H.cal.stat_hitsum4 / H.cal.stat_trksum4}

**************************
* Hodoscope Efficiencies * 
**************************

=:=:=:=:=
= SHMS  =
=:=:=:=:=
Efficiencies for hodoscopes is the fraction of times scin. was hit when track
with chisquared/dof < {pstat_maxchisq:%5.1f} came within {pstat_slop:%4.1f} cm of the center.

Events examined = strig       = {shms_trigs.npassed}
Tracks found    = scleantrack = {pcut_CleanTrack.npassed}
//Tracks passing chisquared cut = (pstat_numevents) (in previous template, do we still need this?)

Plane 1: {}
Plane 2: {phodo_plane_AND_eff[1]}
Plane 3: {phodo_plane_AND_eff[2]}
Plane 4: {phodo_plane_AND_eff[3]}

S1XY : {phodo_s1XY_eff}
S2XY : {phodo_s2XY_eff}

STOF: {phodo_stof_eff}

3_of_4 EFF : {phodo_3_of_4_eff}
4_of_4 EFF : {phodo_4_of_4_eff}

=:=:=:=:=
=  HMS  =
=:=:=:=:=
Efficiencies for hodoscopes is the fraction of times scin. was hit when track
with chisquared/dof < {hstat_maxchisq:%5.1f} came within {hstat_slop:%4.1f} cm of the center.

Events examined = strig       = {hms_trigs.npassed}
Tracks found    = scleantrack = {hcut_CleanTrack.npassed}
//Tracks passing chisquared cut = (stat_numevents) (in previous template, do we still need this?)

Plane 1: {hhodo_plane_AND_eff[0]}
Plane 2: {hhodo_plane_AND_eff[1]}
Plane 3: {hhodo_plane_AND_eff[2]}
Plane 4: {hhodo_plane_AND_eff[3]}

S1XY : {hhodo_s1XY_eff}
S2XY : {hhodo_s2XY_eff}

STOF: {hhodo_stof_eff}

3_of_4 EFF : {hhodo_3_of_4_eff}
4_of_4 EFF : {hhodo_4_of_4_eff}
